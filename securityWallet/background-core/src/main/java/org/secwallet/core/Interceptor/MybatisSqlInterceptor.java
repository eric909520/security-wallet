package org.secwallet.core.Interceptor;

import org.secwallet.core.util.string.Constants;
import org.secwallet.core.model.SecUser;
import lombok.extern.slf4j.Slf4j;
import org.apache.ibatis.executor.Executor;
import org.apache.ibatis.mapping.BoundSql;
import org.apache.ibatis.mapping.MappedStatement;
import org.apache.ibatis.mapping.ParameterMapping;
import org.apache.ibatis.mapping.SqlCommandType;
import org.apache.ibatis.plugin.*;
import org.apache.ibatis.reflection.MetaObject;
import org.apache.ibatis.session.Configuration;
import org.apache.ibatis.type.TypeHandlerRegistry;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;

import java.text.DateFormat;
import java.util.*;
import java.util.regex.Matcher;

@Intercepts({
        @Signature(type = Executor.class, method = "update",
                args = {MappedStatement.class, Object.class})})
@Slf4j
@Component
public class MybatisSqlInterceptor implements Interceptor {

    @Override
    public Object intercept(Invocation invocation) throws Throwable {
        SecUser user = null;
        //There is no authentication interface, no user information, directly execute sql
        if (AuthorizationInterceptor.threadLocal.get() != null) {
            user = (SecUser) AuthorizationInterceptor.threadLocal.get().get(Constants.THREAD_LOCAL_USER_KEY);
        }
        long start = System.currentTimeMillis();
        Object returnValue = invocation.proceed();
        long end = System.currentTimeMillis();

        long time = end - start;
        try {
            final Object[] args = invocation.getArgs();
            MappedStatement mappedStatement = (MappedStatement) args[0];
            SqlCommandType sqlCommandType = mappedStatement.getSqlCommandType();

            if (!SqlCommandType.SELECT.equals(sqlCommandType)) {
                Object parameter = null;
                //Get parameters, the if statement is established, indicating that the sql statement has parameters, and the parameter format is map form
                if (args.length > 1) {
                    parameter = invocation.getArgs()[1];
                }
                //Get the id of the node, that is, the id of the sql statement
                String sqlId = mappedStatement.getId();
                //BoundSql is the sql class finally generated by encapsulating myBatis
                BoundSql boundSql = mappedStatement.getBoundSql(parameter);
                //Get the configuration of the node
                Configuration configuration = mappedStatement.getConfiguration();
                // Get the final sql statement
                log.info("sql type:{} , userId:{}, sql:{}", mappedStatement.getSqlCommandType().toString(), user == null ? "none" : user.getId(), showSql(configuration, boundSql, sqlId, time));
            }

        } catch (Exception e) {
            log.error( "Intercept sql error" + e.getMessage());
            e.printStackTrace();
        }
        return returnValue;
    }

    /**
     * Get current login information
     *
     * @return
     */
    public Authentication getAuthentication() {
        if (SecurityContextHolder.getContext() == null) {
            return null;
        }
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        return authentication;
    }

    /**
     * /**
     * Make the result return the sql statement node id + sql statement under the complete xml path
     */
    public static String showSql(Configuration configuration, BoundSql boundSql, String sqlId, long time) {
        return "\nbegin【sql start】\n" +
                sqlId +
                ":time consuming【" +
                time +
                "】millisecond\n" +
                getSql(configuration, boundSql) +
                "\nend【sql end】";
    }

    // conduct ? replacement
    public static String getSql(Configuration configuration, BoundSql boundSql) {

        // 获取参数
        Object parameterObject = boundSql.getParameterObject();
        List<ParameterMapping> parameterMappings = boundSql
                .getParameterMappings();

        // Multiple spaces in the sql statement are replaced with one space
        String sql = boundSql.getSql().replaceAll("[\\s]+", " ");
        if (!CollectionUtils.isEmpty(parameterMappings) && parameterObject != null) {

            // Get the type processor register, the function of the type processor is to convert the java type and the database type
            // If the corresponding type can be found according to parameterObject.getClass(), then replace

            TypeHandlerRegistry typeHandlerRegistry = configuration.getTypeHandlerRegistry();
            if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {
                sql = sql.replaceFirst("\\?", Matcher.quoteReplacement(getParameterValue(parameterObject)));

            } else {
                MetaObject metaObject = configuration.newMetaObject(parameterObject);
                /*
                 * MetaObject mainly encapsulates the originalObject object and provides get and set methods to get and
                 * set the property value of the originalObject.
                 */
                // It mainly supports the operation of three types of objects: JavaBean, Collection, and Map.
                for (ParameterMapping parameterMapping : parameterMappings) {
                    String propertyName = parameterMapping.getProperty();
                    if (metaObject.hasGetter(propertyName)) {
                        Object obj = metaObject.getValue(propertyName);
                        sql = sql.replaceFirst("\\?", Matcher.quoteReplacement(getParameterValue(obj)));
                    } else if (boundSql.hasAdditionalParameter(propertyName)) {
                        Object obj = boundSql.getAdditionalParameter(propertyName);
                        sql = sql.replaceFirst("\\?", Matcher.quoteReplacement(getParameterValue(obj)));
                    } else {
                        sql = sql.replaceFirst("\\?", "missing");
                    }
                }
            }
        }
        return sql;
    }


    private static String getParameterValue(Object obj) {
        String value = null;
        if (obj instanceof String) {
            value = "'" + obj.toString() + "'";
        } else if (obj instanceof Date) {
            Date date = (Date) obj;
            DateFormat formatter = DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.CHINA);
            value = "'" + formatter.format(date) + "'";
        } else {
            if (obj != null) {
                value = obj.toString();
            } else {
                value = "";
            }

        }
        return value;
    }

    @Override
    public Object plugin(Object obj) {
        return Plugin.wrap(obj, this);
    }

    @Override
    public void setProperties(Properties properties) {

    }

}